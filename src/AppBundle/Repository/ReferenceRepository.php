<?php

/*

 Copyright 2019 CNRS.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License,
 or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ReferenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReferenceRepository extends EntityRepository
{
	function lastYearOfReference()
    {
		$em = $this->getEntityManager();
        $sql = $em->createQuery("SELECT r.journalYear FROM AppBundle:Reference r ORDER BY r.journalYear DESC")->setMaxResults(1)->getResult();
        return $sql;
	}

	function findLastPmIdRis()
    {
		$em = $this->getEntityManager();
		$sql = $em->createQuery("SELECT r.pmId FROM AppBundle:Reference r WHERE r.pmId LIKE '%00000000%' ORDER BY r.pmId DESC")->setMaxResults(1)->getResult();
		return $sql;
	}

	function findLatestsReferences()
    {
		$em = $this->getEntityManager();
        $qb = $em->createQueryBuilder()
            ->select( 'r, e.id' )
            ->from( 'AppBundle:Reference', 'r')
            ->innerJoin('AppBundle:Mutation', 'm', 'WITH', 'm.mainReference = r')
            ->innerJoin('AppBundle:Entry', 'e', 'WITH', 'm.entry = e')
            ->where('r.articleTitle IS NOT NULL' )
            ->groupBy('r.id')
            ->orderBy('r.id', 'DESC')
            ->setMaxResults(3)
        ;

        return $qb->getQuery()->getResult();
	}

	public function findByIdentifier($id)
	{
		$qb = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from('AppBundle:Reference', 'r')
            ->where('r.pmId = :id')
            ->orWhere('r.doi = :id')
            ->orWhere('r.pmId = :versionedId')
            ->setParameter('id', $id)
            ->setParameter('versionedId', $id.".1")
            ->setMaxResults(1);

        $query = $qb->getQuery();

        try 
        {
            $entry = $query->getSingleResult();

            return $entry;
           
        } 
        catch (\Doctrine\ORM\ORMException $e) 
        {
            return null;
        }
	}

    /**
     * Returns the oldest and newest publication dates
     */
    public function findOldestAndNewestReferences()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('max(r.journalYear) as newest, min(r.journalYear) as oldest')
            ->from('AppBundle:Reference', 'r');

        $query = $qb->getQuery();

        try 
        {
            $years = $query->getSingleResult();

            return $years;
           
        } 
        catch (\Doctrine\ORM\ORMException $e) 
        {
            return null;
        }
    }
}
