<?php

/*

 Copyright 2019 CNRS.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License,
 or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


namespace AppBundle\Repository;

/**
 * RejectedReferenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RejectedReferenceRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Find a list of all rejected references and store in assoc array indexed by pmid
	 */
	public function findAllAssoc()
	{
		$qb = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from('AppBundle:RejectedReference', 'r');
        $query = $qb->getQuery();

        try 
        {
            $references = $query->getResult();

            $array = array();
            foreach($references as $reference) {
            	$array[$reference->getReference()->getPmId()] = $reference;
            }

            return $array;
           
        } 
        catch (\Doctrine\ORM\ORMException $e) 
        {
            return array();
        }
	}

    /**
     * Find a list of all references that belong to the rejected list
     */
    public function findAllReferences()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from('AppBundle:Reference', 'r')
            ->innerJoin('AppBundle:RejectedReference', 'rr', 'WITH', 'r = rr.reference');
        $query = $qb->getQuery();

        try 
        {
            $references = $query->getResult();

            return $references;
           
        } 
        catch (\Doctrine\ORM\ORMException $e) 
        {
            return null;
        }

        return $array;
    }
}
