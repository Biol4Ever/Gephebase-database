<?php

/*

 Copyright 2019 CNRS.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License,
 or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TaxonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaxonRepository extends EntityRepository
{
	public function searchTaxon($term) {
        $em = $this->getEntityManager();
        $sql = $em->createQuery("SELECT t.taxId AS taxId FROM AppBundle:Taxon t WHERE t.taxId LIKE :term")->setParameter('term', '%'.$term.'%')->getResult();
        return $sql;
    }

    /**
     * Returns a list of all otherReferences in an array indexed by mutation id
     */
    public function findAllWithParents()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('t.id', 'IDENTITY(t.parentId) as parent')
            ->from('AppBundle:Taxon', 't')
        ;

        $query = $qb->getQuery();

        try {
            $results = $query->getResult();

            return $results;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Returns an array of all duplicate taxons indexed by taxId
     */
    public function findDuplicateTaxons()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('t as taxon, t.taxId')
            ->from('AppBundle:Taxon', 't')
        ;

        $query = $qb->getQuery();

        try {
            $results = $query->getResult();

            $taxons = [];
            foreach ($results as $result) {
                $taxons[$result['taxId']][] = $result['taxon'];
            }

            $duplicates = [];
            foreach ($taxons as $id => $taxon) {
                if (count($taxon) > 1) {
                    $duplicates[$id] = $taxon;
                }
            }

            return $duplicates;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
