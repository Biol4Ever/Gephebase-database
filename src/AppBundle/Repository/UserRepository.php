<?php

/*

 Copyright 2019 CNRS.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License,
 or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function searchValidator($term)
    {
        $em = $this->getEntityManager();
        $sql = $em->createQuery('SELECT DISTINCT(u.email) AS email
                                 FROM AppBundle:User u 
                                 WHERE u.email LIKE :term AND u.roles LIKE :roles')->setParameters(array('term' => '%'.$term.'%', 'roles' => '%ROLE_VALIDATOR%'))->getResult();

        return $sql;
    }

    public function validatorFilterBy($name, $surname, $email)
    {
        $where = ' AND ';
        if (null != $name) {
            $nameq = $where.'u.name LIKE :name ';
            $array['name'] = '%'.$name.'%';
        } else {
            $nameq = '';
        }
        if (' ' == $where && null != $name) {
            $where = ' AND ';
        }
        if (null != $surname) {
            $surnameq = $where.' u.surname LIKE :surname ';
            $array['surname'] = '%'.$surname.'%';
        } else {
            $surnameq = '';
        }
        if (' ' == $where && null != $surname) {
            $where = ' AND ';
        }
        if (null != $email) {
            $emailq = $where.'u.email LIKE :email ';
            $array['email'] = '%'.$email.'%';
        } else {
            $emailq = '';
        }
        $array['roles'] = '%ROLE_VALIDATOR%';
        $q = $nameq.$surnameq.$emailq;

        $em = $this->getEntityManager();
        if (isset($array)) {
            $sql = $em->createQuery('SELECT DISTINCT(u.email) AS email, u.surname AS surname, u.name AS name, u.id AS id FROM AppBundle:User u WHERE u.roles LIKE :roles '.$q)->setParameters($array)->getResult();
        } else {
            $sql = $em->createQuery('SELECT DISTINCT(u.email) AS email, u.surname AS surname, u.name AS name, u.id AS id FROM AppBundle:User u WHERE u.roles LIKE :roles ')->getResult();
        }

        return $sql;
    }

    public function listAllCurators()
    {
        $em = $this->getEntityManager();
        $sql = $em->createQuery("SELECT u FROM AppBundle:User u WHERE u.roles LIKE '%ROLE_CURATOR%' ")->getResult();

        return $sql;
    }

    /**
     * Returns an array of emails linked to the given entry id.
     */
    public function findValidatorsByEntryId($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('v.email')
            ->from('AppBundle:User', 'v')
            ->innerJoin('AppBundle:Entry', 'e', 'WITH', 'v MEMBER OF e.validators')
            ->where('e.id = :entryId')
            ->setParameter('entryId', $id)
            ;

        $query = $qb->getQuery();

        try {
            $results = $query->getResult();

            $emails = array();
            foreach ($results as $result) {
                $emails[] = $result['email'];
            }

            return $emails;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
